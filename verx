1）官方的用 Vert.x 搭建 Wiki 教程:

网址：教程，https://github.com/vert-x3/vertx-guide-for-java-devs
要点：前后端通信，Verticle 间通信，异步模型
评述：如果做对实时性要求没有那么高的应用（非游戏、非 IoT），那么这个教程就非常够用了。
2）A multi-user realtime game by Burr Sutter:

网址：Youtube 视频，https://github.com/burrsutter/vertx-game-server
要点：Reactive 编程，eventbus 通信
评述：非常惊艳的现场演示，服务器—客户端实时互动，玩家间实时互动，绝对的一 demo 胜千言。不过除了几个视频以外没找到任何的文字教程，Github 上的文档也写的比较简单，所以没有实际测试过。但 Burr Sutter 的几次演讲视频的确是我们最初对 Vert.x 动心的原因。
3）Vert.x console:

网址：GitHub repo，https://github.com/yunyu/vertx-console
要点：Vue.js，docker，实时监控
评述：由英语很棒的青年开发者 Yunyu Li 在 GSoC 2017 中贡献，由于 Vert.x 3.5.1 刚刚修复了此前 web client 的一个 bug，新版 vertx-console 还没来得及测试。整体上是一个完成度相当高的全栈项目，尤其是监控部分对于 IoT 应用非常关键。
4）InMood4Life:

网址：博客文章，https://github.com/BreizhBeans/InTheMood4Life
要点： Gradle 项目，完全 Groovy 开发，IoT，外设协同
评述：众多上手项目中唯一一个不用 Java 开发的，使用了 Gradle + Groovy 这个组合。同时这个项目桥接了蓝牙设备，体现了 Vert.x 在软硬件协同项目中的前景。这类项目常见的上手难度在于没有那几样外设则无法跑起来，只能看看代码过过干瘾。
5）Vert.x starter:

网址：https://vertx-starter.jetdrone.xyz/, 视频演示
要点：增减组件、配置依赖关系、前后端匹配
评述：Vert.x 主程之一 pmlopes 做的最小项目生成器，点点按钮就能生成工程文件。我们主要研究了一下用 Maven (Java/Kotlin)+ Vue.js 配置出来的起步工程，觉得是很好的全栈上手参考。Java + Maven 组合应该是作者主要精力所在，经测可用; Java + Gradle 的可配置项少一点，但也经测可用。Kotlin + Maven 生成项目有 bug，反映给作者后打了补丁，但也可以看出可能暂时不是维护重点。添加 Vert.x 的模块很方便，但只是添加了 maven 包依赖，没有起始代码。相比之下， Clojure 的 Luminus 项目功能与之类似，但每加一个包都会生成相应的起始代码，大大降低了上手难度。另外一个问题是几乎没有文档，牵涉到前端的运行过程要看上面的视频演示。Vert.x 官方也有一个 starter，与 pmlopes 自己的私房 xyz starter 功能类似，但是要简单一点。猜测两个 starter 同源，应该会合并。

5）一个基于 microservice 的实时商品报价平台样例

网址：Vert.x - From zero to (micro)-hero
要点：分布式、微服务 microservice、RxJava、实时监控
评述：重点推荐。Vert.x 主创人员 Clement Escoffier 和 Julien Viet 创作的一个内容翔实的教程，把框架代码写好了，让初学者把核心业务代码填到需要的地方去。提供了懒人式打开即用的源代码，最终的效果是一个有前后端、实时曲线、服务追踪的比较全面的样例工程。
6）Vertx Blueprint (三个项目）：

网址：博客文章，GitHub repo (Todo, Kue, Micro Shop) http://escoffier.me/vertx-hol/ https://github.com/sczyh30/vertx-kue https://github.com/sczyh30/vertx-blueprint-microservice
要点： 前后端全栈、Eventbus 通信、微服务 microservice 架构、docker
评述： 由杭州网友 sczyh30 在 GSoC 2016 中贡献，三个例子循序渐进，质量很高。第三个 Micro Shop 的例子是一个全栈的电子商务网站，全部 docker 部署，啃下来就基本上明白 Vert.x microservice 在生产中怎么做了。不过 Micro Shop 跑起来需要自己配置 docker-machine 环境。在测试中发现代码与最新版本的 Keycloak 用户权限管理模块有点冲突，作者正在修改中。


7）VertxUp / VertxZero:
https://github.com/silentbalanceyh
网址：Vertx Zero Up Framework
要点：Dependency Injection、与 Spring 的对应理解、复杂项目组织方式
评述：我们之前没有 Spring 开发经验，这个项目理解起来有些困难。但对于熟悉 Spring 的开发者是很好的迁移途径，由重庆网友 silentbalanceyh 开发。

8）基于Vert.x和RxJava 2构建通用的爬虫框架
https://github.com/fengzhizi715/NetDiscovery
网址：文章，GitHub repo
要点：爬虫、http client
评述：爬虫功能与我们这次的 IoT 应用稍有不同，但也是web app 中的一个常见需求。由网友沈哲开发。

9）另一个基于微服务的例子
https://github.com/piomin/sample-vertx-microservices
网址：文章，GitHub repo
要点：异步与 MongoDB 通信，vertx-config，Consul 服务发现
评述：主要阅读了教程文章，测试环境介绍得不太全所以没有实际测试。但项目就两个模块，结构比较清晰，适合初学时阅读理解。

10）Clement Escoffier 写的又一套新手教程
https://github.com/redhat-developer/introduction-to-eclipse-vertx
网址：文章，GitHub repo
要点： web app 入门，异步通讯，简单 REST，RxJava 解决 callback hell
评述：主要开发者 Clement 可谓在 Vert.x 的教学推广上不遗余力。可惜的是仍然没有一个完整的类似 RealWorld demo (conduit) 的例子。不过 vertx-examples 里面的例子是很全的，对于不想当伸手党的新手来说，其实弹药充足的很。

11）采用 Vert.x 和 RxJava 做数据缓存
https://github.com/dlew/rxjava-multiple-sources-sample
网址：文章，Github repo
要点： vert.x 做缓存，适用场合类似 Redis 但据说性能更高，原因是节省了很多 IO
评述：新手如果学做 Hello world 应用应该不需要这篇教程。然而缓存是任何严肃应用很早期就会遇到的问题。个人认为如果在 vert.x 中再开设一个 redis，好处是搭积木起应用快，坏处是需要多维护一个 redis 服务。这对初创团队来说增加了部署复杂度，也分散运维精力。考虑到 vert.x+postgres 几乎是可以标配到所有初创应用，只依赖这2个标配工具如果能顺带做起高性能缓存，那么对初创团队而言是节省精力的。

12）在 Vert.x 上面做 REST 的一个教程
https://github.com/PharosProduction/tutorial-vertx-rest-on-java
网址：文章，GitHub repo
要点：平实的一篇 Vert.x + REST 的教程，不多不少
评述：难得有一篇从 Maven 配置开始讲起，小白友好，尤其是对非 Java 生态转过来的开发者友好。有项目以后自己从头开始建 Maven 工程的情况并不多，但是这种手把手的教程对于新手是非常有意义的。

pool.withTransaction(client -> client
.query("INSERT INTO student (id, name) VALUES ('5','曹操')")
.execute()
.flatMap(res -> client
.query("INSERT INTO student (id, name) VALUES ('6','司马懿')")
.execute()
// Map to a message result
.map("student inserted")))
.onSuccess(v -> System.out.println("Transaction succeeded"))
.onFailure(err -> System.out.println("Transaction failed: " + err.getMessage())
);
